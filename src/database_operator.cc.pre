#include "database_operator.h"
#include <sstream>

// create database connect
int DatabaseOperator::Init()
{
    conn.set_option(new mysqlpp::SetCharsetNameOption("utf8"));

    if(conn_.connect(DATABASE_NAME,DATABASE_SERVER_IP,"root","111111"))
    {
        LOG_INFO <<"DB Connection success: ";
		mysqlpp::Query query = conn.query("select job_id,name from employee_info");
        if (mysqlpp::StoreQueryResult res = query.store()) {
            cout << "We have:" << endl;
            mysqlpp::StoreQueryResult::const_iterator it;
            for (it = res.begin(); it != res.end(); ++it) {
                mysqlpp::Row row = *it;
                cout << '\t' << row[0] << '\t' << row[1] << endl;
            }
        }
        else {
            cerr << "Failed to get item list: " << query.error() << endl;
           
        }
    }
    else
    {
        LOG_ERROR <<"DB Connection failed: " << conn.error();
        return -1;
    }

    return 0;
}

bool DatabaseOperator::ExecTask(DatabaseOperatorTask& task)
{
    UINT16 taskType = task.task_type;
    UINT8  operatorType = task.operator_type;
    LOG_DEBUG << "task content: " << task.content;

    switch(taskType)
    {
        case MSG_REPLY|MSG_GETPRODUCTION:
        {
            // add code here


            break;
        }
        case MSG_REPLY|MSG_GETFIRMWAREINFO:
        {
            //add code here
            break;
        }

        default:
            break;
    }
}


std::vector<UINT16>  DatabaseOperator::GetNodesOfGateway (string ipaddr )
{
    std::vector<UINT16> tvNodes;
    mysqlpp::Query query = conn.query("select node from node_register_info");
    if (mysqlpp::StoreQueryResult res = query.store())
    {

        mysqlpp::StoreQueryResult::const_iterator it;
        for (it = res.begin(); it != res.end(); ++it)
        {
            mysqlpp::Row row = *it;
            LOG_DEBUG << "node addr = " << row[0];
            tvNodes.push_back(row[0]);
        }
    }
    else
    {
        LOG_DEBUG << "There is no node of  ipaddr. " ;
    }

    return tvNodes;
}

bool  DatabaseOperator::DeleteNodeofGateway(string ipaddr, UINT16 node)
{
    std::vector<UINT16> tvNodes;

    osstringstream ostrsql;
    if(node == 0)
    {
        ostrsql << "delete from node_register_info where ip=" << ip ;
    }
    else
    {
        ostrsql << "delete from node_register_info where ip=" << ip << " and node=" << node;
    }
    mysqlpp::Query query = conn.query(ostrsql.str().c_str());




    return true;
}

bool  DatabaseOperator::InsertNodeOfGateway(string ipaddr, UINT16 node)
{
    return true;
}

bool  DatabaseOperator::UpdateNodesOfGateway(string ipaddr, string name)
{
    return true;
}


string  DatabaseOperator::GetNameOfGateWay(string ipaddr)
{
    return "";
}

